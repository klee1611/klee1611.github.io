<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Programming - 標籤 - Kourtney&#39;s Blog</title>
        <link>http://klee1611.github.io/tags/programming/</link>
        <description>Programming - 標籤 - Kourtney&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><managingEditor>kourtneylee1611@gmail.com (Kourtney Lee)</managingEditor>
            <webMaster>kourtneylee1611@gmail.com (Kourtney Lee)</webMaster><lastBuildDate>Sun, 26 Sep 2021 18:34:23 &#43;0800</lastBuildDate><atom:link href="http://klee1611.github.io/tags/programming/" rel="self" type="application/rss+xml" /><item>
    <title>Pipenv Notes</title>
    <link>http://klee1611.github.io/posts/pipenv-notes.html/</link>
    <pubDate>Sun, 26 Sep 2021 18:34:23 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://klee1611.github.io/posts/pipenv-notes.html/</guid>
    <description><![CDATA[Why Pipenv 當有很多 Python project 要維護，
不同的 project 有可能使用相同的 python libraries 的不同版本，
不使用 virtual environment 而將所有的 python modules 都裝在自己的機器上就會造成版本衝突。
過去使用 virtualenv + requirement.txt 的機制可以在不同的 project 使用同一個套件的不同版本，
也能夠讓新加入的開發者或 production 環境可以快速安裝 project 需要的套件，
但當套件需要更新時相當麻煩，
需要手動再去倒出一份新的 requirement.txt，
而且當 project 有不同環境的需求的時候(例如 development 環境和 production 環境)還要維護requirement-prod.txt 和 requirement-dev.txt 兩份套件設定，
如果不搭配 pyenv 也無法切換不同的 python 版本。
後來發現了 Python 官方推薦的 pipenv 解決了這些問題，
可以方便的只用 command 做到：
 建立獨立的 python 版本和套件虛擬環境 安裝並記錄套件版本到自動生成的 Pipfile 和 Pipfile.lock，同時透過套件的 Hash 值檢查套件安全性 紀錄套件使用環境 (分開 development 和 production 環境) 讀取 .]]></description>
</item><item>
    <title>Deep Copy and Shallow Copy</title>
    <link>http://klee1611.github.io/posts/deep-copy-shallow-copy.html/</link>
    <pubDate>Tue, 21 Jan 2020 01:19:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://klee1611.github.io/posts/deep-copy-shallow-copy.html/</guid>
    <description><![CDATA[Shallow Copy 複製越少越好，
Shallow copy 出來的新的 structure 擁有跟舊的 structure 相同的結構，
並一起共享 elements。
舉個 Java 的例子，
int[] arr1 = {1, 2, 3}; int[] arr2 = arr1; arr2 就是一個 arr1 的 shallow copy。
 一旦其中一個 structure 更動了 element 另外一個也會受到影響。  Deep Copy 全部複製，
Deep copy 出來的 structure 不但有跟舊的 structure 相同的結構，
還把舊的 structure 的 elements 全部複製了一份給新的。
int[] arr1 = {1, 2, 3}; int[] arr2 = new int[arr1.length]; for (int i = 0; i &lt; arr1.]]></description>
</item><item>
    <title>C&#43;&#43; STL Containers 比較 - array, vector, deque, list, forward_list</title>
    <link>http://klee1611.github.io/posts/c-stl-container-compare-array-vector-dequeue-list-forward_list.html/</link>
    <pubDate>Sun, 12 Jan 2020 20:40:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://klee1611.github.io/posts/c-stl-container-compare-array-vector-dequeue-list-forward_list.html/</guid>
    <description><![CDATA[Array 固定大小的連續記憶體空間所構成
優缺點  不能像其他 C++ container 那樣動態改變儲存空間的大小 random access 很有效率 (O(1))  Vector 可以動態改變儲存空間大小的 array
底層實作方式  動態的 allocate array，
當目前的 capacity 不夠大的時候就重新 reallocate 一個新的 array 然後把舊的 element 搬過去   實際上的 capacity 會比目前塞進 vector 裡面的 element 數量大  優缺點  random access 很有效率 (O(1)) 在尾端加入或刪除 element 相對有效率 在不是尾端的地方加入或刪除 element 比較慢  Deque Double-ended queue，
一樣可以動態的改變 container 大小。
不同的 library 實作 deque 的方式可能會不一樣。
優缺點  可以當作是在 container 的頭和尾做 insert 和 delete 都一樣很有效率的 vector，]]></description>
</item><item>
    <title>Github Pages and Jekyll - sitemap</title>
    <link>http://klee1611.github.io/posts/jekyll-sitemap-github-pages.html/</link>
    <pubDate>Mon, 30 Dec 2019 22:19:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://klee1611.github.io/posts/jekyll-sitemap-github-pages.html/</guid>
    <description><![CDATA[<h2 id="sitemap">Sitemap</h2>
<p>sitemap 基本上就一個 <code>.xml</code> 檔案，<br>
裡面包含了網站有哪些頁面連結，<br>
讓搜尋引擎去爬，<br>
搜尋引擎爬完以後就可以建立 index，<br>
之後有人在搜尋引擎打關鍵字才搜尋的到。</p>
<h2 id="jekyll-sitemap">Jekyll-sitemap</h2>
<p>Jekyll 有一個 plugin 叫做 <a href="https://github.com/jekyll/jekyll-sitemap" target="_blank" rel="noopener noreffer">jekyll-stiemap</a>，<br>
可以在每次 build 網站之後自動產生 sitemap。</p>]]></description>
</item><item>
    <title>C/C&#43;&#43; - const 加上 pointer 和 reference 的用法整理</title>
    <link>http://klee1611.github.io/posts/const-pointer-reference.html/</link>
    <pubDate>Mon, 30 Dec 2019 08:19:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://klee1611.github.io/posts/const-pointer-reference.html/</guid>
    <description><![CDATA[<h2 id="const-和一般變數">const 和一般變數</h2>
<p>有兩種寫法</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">const</span> <span class="n">TYPE</span> <span class="n">NAME</span> <span class="o">=</span> <span class="n">VALUE</span><span class="p">;</span> <span class="c1">// more common
</span><span class="c1"></span><span class="n">TYPE</span> <span class="k">const</span> <span class="n">NAME</span> <span class="o">=</span> <span class="n">VAULE</span><span class="p">;</span>
</code></pre></div><p>意思都一樣，<br>
就是這個變數不能再被指定別的值。</p>
<p>舉個例：</p>]]></description>
</item><item>
    <title>Concurrent Processing and Parallel Processing</title>
    <link>http://klee1611.github.io/posts/concurrent-process-parallel-process.html/</link>
    <pubDate>Wed, 25 Dec 2019 19:40:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://klee1611.github.io/posts/concurrent-process-parallel-process.html/</guid>
    <description><![CDATA[<p>Concurrent Processing 和 Parallel Processing 指的都是 CPU 在 一段時間內執行多個 process，</p>
<p>但兩者在概念上有些差異；</p>
<p>根據 <a href="http://shop.oreilly.com/product/9780596521547.do" target="_blank" rel="noopener noreffer">The Art of Concurrency</a> ，</p>
<p>Concurrent 指的是</p>
<pre><code>two or more processes are in progress at the same time
</code></pre>]]></description>
</item></channel>
</rss>
