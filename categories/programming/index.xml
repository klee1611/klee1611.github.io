<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Programming - 分類 - Kourtney's Blog</title><link>http://klee1611.github.io/categories/programming/</link><description>Programming - 分類 - Kourtney's Blog</description><generator>Hugo -- gohugo.io</generator><managingEditor>kourtneylee1611@gmail.com (Kourtney Lee)</managingEditor><webMaster>kourtneylee1611@gmail.com (Kourtney Lee)</webMaster><lastBuildDate>Tue, 21 Jan 2020 01:19:00 +0800</lastBuildDate><atom:link href="http://klee1611.github.io/categories/programming/" rel="self" type="application/rss+xml"/><item><title>Deep Copy and Shallow Copy</title><link>http://klee1611.github.io/posts/deep-copy-shallow-copy.html/</link><pubDate>Tue, 21 Jan 2020 01:19:00 +0800</pubDate><author>作者</author><guid>http://klee1611.github.io/posts/deep-copy-shallow-copy.html/</guid><description>Shallow Copy 複製越少越好，
Shallow copy 出來的新的 structure 擁有跟舊的 structure 相同的結構，
並一起共享 elements。
舉個 Java 的例子，
int[] arr1 = {1, 2, 3}; int[] arr2 = arr1; arr2 就是一個 arr1 的 shallow copy。
一旦其中一個 structure 更動了 element 另外一個也會受到影響。 Deep Copy 全部複製，
Deep copy 出來的 structure 不但有跟舊的 structure 相同的結構，
還把舊的 structure 的 elements 全部複製了一份給新的。
int[] arr1 = {1, 2, 3}; int[] arr2 = new int[arr1.length]; for (int i = 0; i &amp;lt; arr1.length; ++i) { arr2[i] = arr1[i]; } arr2 是 arr1 的 deep copy。</description></item></channel></rss>