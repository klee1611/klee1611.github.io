<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Kourtney's Blog</title><link>https://klee1611.github.io/zh-tw/tags/programming/</link><description>Recent content in Programming on Kourtney's Blog</description><generator>Hugo</generator><language>zh-TW</language><managingEditor>kourtneylee1611@gmail.com (Kourtney Lee)</managingEditor><webMaster>kourtneylee1611@gmail.com (Kourtney Lee)</webMaster><lastBuildDate>Fri, 31 Oct 2025 16:17:18 +0800</lastBuildDate><atom:link href="https://klee1611.github.io/zh-tw/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Pyenv Notes</title><link>https://klee1611.github.io/zh-tw/posts/pyenv-notes.html/</link><pubDate>Mon, 01 Nov 2021 18:48:33 +0800</pubDate><author>kourtneylee1611@gmail.com (Kourtney Lee)</author><guid>https://klee1611.github.io/zh-tw/posts/pyenv-notes.html/</guid><description>&lt;h3 id="pyenv-的功能和使用的原因"&gt;&lt;code&gt;pyenv&lt;/code&gt; 的功能和使用的原因&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 是用來在系統裡安裝各種不同版本的 python，&lt;/p&gt;
&lt;p&gt;並能夠方便的切換 python 版本的工具。&lt;/p&gt;
&lt;p&gt;當同時有不同 python 版本的專案需要開發或維護時，&lt;/p&gt;
&lt;p&gt;就會需要使用 &lt;code&gt;pyenv&lt;/code&gt; 來協助切換 python 的版本。&lt;/p&gt;</description></item><item><title>Python Coroutine Asyncio</title><link>https://klee1611.github.io/zh-tw/posts/python-coroutine-asyncio.html/</link><pubDate>Wed, 27 Oct 2021 16:39:27 +0800</pubDate><author>kourtneylee1611@gmail.com (Kourtney Lee)</author><guid>https://klee1611.github.io/zh-tw/posts/python-coroutine-asyncio.html/</guid><description>&lt;p&gt;在出現 &lt;code&gt;asyncio&lt;/code&gt; 前，&lt;br&gt;
當一隻 Python 程式有很多需要並行執行的 task，&lt;br&gt;
想要提升程式效能，&lt;br&gt;
只能選用 multiprocessing 或 threading；&lt;br&gt;
Python 3.4 之後又多出了 &lt;code&gt;asyncio&lt;/code&gt; 的選擇。&lt;br&gt;
&lt;code&gt;asyncio&lt;/code&gt; 可以用來撰寫 coroutines，&lt;br&gt;
並使用 event loop 並行執行 coroutines，&lt;br&gt;
減少程式不必要的等待時間以提升效能。&lt;/p&gt;</description></item><item><title>Pipenv Notes</title><link>https://klee1611.github.io/zh-tw/posts/pipenv-notes.html/</link><pubDate>Sun, 26 Sep 2021 18:34:23 +0800</pubDate><author>kourtneylee1611@gmail.com (Kourtney Lee)</author><guid>https://klee1611.github.io/zh-tw/posts/pipenv-notes.html/</guid><description>&lt;h2 id="why-pipenv"&gt;Why Pipenv&lt;/h2&gt;
&lt;p&gt;當有很多 Python project 要維護，&lt;br&gt;
不同的 project 有可能使用相同的 python libraries 的不同版本，&lt;br&gt;
不使用 virtual environment 而將所有的 python modules 都裝在自己的機器上就會造成版本衝突。&lt;/p&gt;
&lt;p&gt;過去使用 &lt;code&gt;virtualenv&lt;/code&gt; + &lt;code&gt;requirement.txt&lt;/code&gt; 的機制可以在不同的 project 使用同一個套件的不同版本，&lt;br&gt;
也能夠讓新加入的開發者或 production 環境可以快速安裝 project 需要的套件，&lt;/p&gt;</description></item><item><title>Deep Copy and Shallow Copy</title><link>https://klee1611.github.io/zh-tw/posts/deep-copy-shallow-copy.html/</link><pubDate>Tue, 21 Jan 2020 01:19:00 +0800</pubDate><author>kourtneylee1611@gmail.com (Kourtney Lee)</author><guid>https://klee1611.github.io/zh-tw/posts/deep-copy-shallow-copy.html/</guid><description>&lt;h3 id="shallow-copy"&gt;Shallow Copy&lt;/h3&gt;
&lt;p&gt;複製越少越好，&lt;br&gt;
Shallow copy 出來的新的 structure 擁有跟舊的 structure 相同的結構，&lt;br&gt;
並一起&lt;strong&gt;共享 elements 的記憶體位置&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;舉個 Java 的例子，&lt;/p&gt;
&lt;div class="code-block code-line-numbers open" style="counter-reset: code-block 0"&gt;
 &lt;div class="code-header language-java"&gt;
 &lt;span class="code-title"&gt;&lt;i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
 &lt;span class="ellipses"&gt;&lt;i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
 &lt;span class="copy" title="複製到剪貼板"&gt;&lt;i class="far fa-copy fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
 &lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-java" data-lang="java"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arr1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;3&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arr2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;arr2&lt;/code&gt; 就是一個 &lt;code&gt;arr1&lt;/code&gt; 的 shallow copy。&lt;/p&gt;</description></item><item><title>C++ STL Containers 比較 - array, vector, deque, list, forward_list</title><link>https://klee1611.github.io/zh-tw/posts/c-stl-container-compare-array-vector-dequeue-list-forward_list.html/</link><pubDate>Sun, 12 Jan 2020 20:40:00 +0800</pubDate><author>kourtneylee1611@gmail.com (Kourtney Lee)</author><guid>https://klee1611.github.io/zh-tw/posts/c-stl-container-compare-array-vector-dequeue-list-forward_list.html/</guid><description>&lt;h2 id="array"&gt;Array&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;固定大小&lt;/strong&gt;的&lt;strong&gt;連續記憶體空間&lt;/strong&gt;所構成&lt;/p&gt;
&lt;h3 id="優缺點"&gt;優缺點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不能像其他 C++ container 那樣動態改變儲存空間的大小&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;random access 很有效率&lt;/strong&gt; (O(1))&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="vector"&gt;Vector&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;可以動態改變儲存空間大小&lt;/strong&gt;的 array&lt;/p&gt;
&lt;h3 id="底層實作方式"&gt;底層實作方式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;動態的 allocate array，&lt;br&gt;
當目前的 capacity 不夠大的時候就重新 reallocate 一個新的 array 然後把舊的 element 搬過去&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;實際上的 capacity 會比目前塞進 vector 裡面的 element 數量大&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="優缺點-1"&gt;優缺點&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;random access 很有效率&lt;/strong&gt; (O(1))&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;尾端&lt;/strong&gt;加入或刪除 element 相對有效率&lt;/li&gt;
&lt;li&gt;在不是尾端的地方加入或刪除 element 比較慢&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="deque"&gt;Deque&lt;/h2&gt;
&lt;p&gt;Double-ended queue，&lt;br&gt;
一樣可以動態的改變 container 大小。&lt;br&gt;
不同的 library 實作 deque 的方式可能會不一樣。&lt;/p&gt;</description></item><item><title>Github Pages and Jekyll - sitemap</title><link>https://klee1611.github.io/zh-tw/posts/jekyll-sitemap-github-pages.html/</link><pubDate>Mon, 30 Dec 2019 22:19:00 +0800</pubDate><author>kourtneylee1611@gmail.com (Kourtney Lee)</author><guid>https://klee1611.github.io/zh-tw/posts/jekyll-sitemap-github-pages.html/</guid><description>&lt;h2 id="更新"&gt;更新&lt;/h2&gt;
&lt;p&gt;已從 Jekyll migrate 到 Hugo，&lt;br&gt;
這篇方法僅適用 Jekyll。&lt;/p&gt;
&lt;h2 id="sitemap"&gt;Sitemap&lt;/h2&gt;
&lt;p&gt;sitemap 基本上就一個 &lt;code&gt;.xml&lt;/code&gt; 檔案，&lt;br&gt;
裡面包含了網站有哪些頁面連結，&lt;br&gt;
讓搜尋引擎去爬，&lt;br&gt;
搜尋引擎爬完以後就可以建立 index，&lt;br&gt;
之後有人在搜尋引擎打關鍵字才搜尋的到。&lt;/p&gt;
&lt;h2 id="jekyll-sitemap"&gt;Jekyll-sitemap&lt;/h2&gt;
&lt;p&gt;Jekyll 有一個 plugin 叫做 &lt;a href="https://github.com/jekyll/jekyll-sitemap" target="_blank" rel="noopener noreffer "&gt;jekyll-stiemap&lt;/a&gt;，&lt;br&gt;
可以在每次 build 網站之後自動產生 sitemap。&lt;/p&gt;</description></item><item><title>C/C++ - const 加上 pointer 和 reference 的用法整理</title><link>https://klee1611.github.io/zh-tw/posts/const-pointer-reference.html/</link><pubDate>Mon, 30 Dec 2019 08:19:00 +0800</pubDate><author>kourtneylee1611@gmail.com (Kourtney Lee)</author><guid>https://klee1611.github.io/zh-tw/posts/const-pointer-reference.html/</guid><description>&lt;h2 id="const-和一般變數"&gt;const 和一般變數&lt;/h2&gt;
&lt;p&gt;有兩種寫法&lt;/p&gt;
&lt;div class="code-block code-line-numbers open" style="counter-reset: code-block 0"&gt;
 &lt;div class="code-header language-cpp"&gt;
 &lt;span class="code-title"&gt;&lt;i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
 &lt;span class="ellipses"&gt;&lt;i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
 &lt;span class="copy" title="複製到剪貼板"&gt;&lt;i class="far fa-copy fa-fw" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
 &lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;TYPE&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VALUE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// more common
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="n"&gt;TYPE&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VAULE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;意思都一樣，&lt;br&gt;
就是這個變數不能再被指定別的值。&lt;/p&gt;
&lt;p&gt;舉個例：&lt;/p&gt;</description></item><item><title>Difference between Concurrent Processing and Parallel Processing</title><link>https://klee1611.github.io/zh-tw/posts/concurrent-process-parallel-process.html/</link><pubDate>Wed, 25 Dec 2019 19:40:00 +0800</pubDate><author>kourtneylee1611@gmail.com (Kourtney Lee)</author><guid>https://klee1611.github.io/zh-tw/posts/concurrent-process-parallel-process.html/</guid><description>&lt;p&gt;Concurrent Processing 和 Parallel Processing 指的都是 CPU &lt;strong&gt;在 一段時間內執行多個 process&lt;/strong&gt;，&lt;br&gt;
但兩者在概念上有些差異；&lt;/p&gt;
&lt;p&gt;根據 &lt;a href="http://shop.oreilly.com/product/9780596521547.do" target="_blank" rel="noopener noreffer "&gt;The Art of Concurrency&lt;/a&gt; ，&lt;br&gt;
Concurrent 指的是&lt;/p&gt;</description></item></channel></rss>